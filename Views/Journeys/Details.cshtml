@using Microsoft.AspNetCore.Identity
@inject UserManager<AppUser> userManager
@model TrainReservation.Models.Journey

@{
    ViewData["Title"] = "Book your next yourney";

    var SubmittionNotAllowed = false; 

    // Check if user has already submitted the booking request 
    // Not very efficient but it works 
    foreach (var Booking in @Model.Bookings) {
        if (Booking.UserID == @userManager.GetUserId(User)) {
            SubmittionNotAllowed = true;
        }
    }

    // Number of passengers already booked for the journey.
    int TotalPassengers = 0; 

    // Check each passengers number for each booking.
    // Sum them up into the `TotalPassengers` var.
    foreach (Booking b in @Model.Bookings) {
        TotalPassengers = TotalPassengers + b.Passengers;
    }

    // Calculate the remaning capacity for a given journey.
    // In case that a specific train supports 32 passengers (which defines
    // its capacity), the capacity will be subtracted by the total number 
    // of passengers that are already booked. 
    int RemainingCapacity = Model.Train.Capacity - TotalPassengers - 1;

    int PassengersInputMaximum = RemainingCapacity + 1;
}

@section scripts {
    <script>
        let SelectedSeatsArray = [];

        // Show the current number of passengers selected by the user 
        let PassengersNumberLabel = $('.passengers__number');

        // Hidden value assigned to the Passengers form control.
        // Required in order to be sent in the back-end. 
        let PassengersNumberInput =  $('.passengers__number--input');

        // How many seats are already selected?
        let SelectedSeatCounter = 0;

        // Provides functions that increment/decrement the passengers value
        // in the `PassengersNumberLabel` and `PassengersNumberInput`
        function PassengersControllers(Capacity) {

            let MinusButton = $('.passengers__number--minus'); // +
            let PlusButton  = $('.passengers__number--plus');  // - 

            let Passengers  = parseInt(PassengersNumberInput.val());
            
            MinusButton.on('click', function () {
                // Decrement only when Passengers is not 1
                if (Passengers > 1) {
                    
                    // check if all passengers have a reserved seat
                    if (SelectedSeatsArray.length > 0 && SelectedSeatsArray.length == Passengers) {

                        // if the number of passengers is decreased by one, remove the last reserved 
                        // seat form the `SelectedSeatsArray`
                        let LastSeatReserved = SelectedSeatsArray[SelectedSeatsArray.length - 1];
                        SelectedSeatsArray.splice(SelectedSeatsArray.indexOf(LastSeatReserved), 1);

                        $('.train__seat').each(function () {
                            if ($(this).hasClass('train__seat--selected') && parseInt($(this).text()) == LastSeatReserved) {
                                $(this).removeClass('train__seat--selected');
                                SelectedSeatCounter--;
                            }
                        });

                        UpdateSeatsReceived(SelectedSeatsArray);
                    } 

                    Passengers -= 1;

                    SetPassengers(Passengers, Capacity);
                }
            }); // </MinusButton>

            // TODO: Find the meaning of this shit
            // CapacityPlusOne = parseInt(Capacity) + 1;

            PlusButton.on('click', function () {

                if (Passengers <= Capacity) {
                    Passengers += 1;
                    SetPassengers(Passengers, Capacity);
                }
            }); // </PlusButton>
        } // </PassengersControllers>

        // Assign passengers number into `PassengersNumberLabel` and
        // `PassengersNumberInput`. Update the price of booking and the
        // remaing capacity of the train. 
        function SetPassengers(Passengers, Capacity) {

            PassengersNumberLabel.text(Passengers);
            PassengersNumberInput.val(Passengers);

            // Remaining capacity
            // It is defined as a subtraction of train capacity 
            // and passengers determined by the user who is booking 
            // the journey including that user (+ 1).  
            Capacity = Capacity - Passengers + 1;
            
            if (Capacity < 0) Capacity = 0;

            // Remaining capacity: output
            $('#capacity').text("(" + Capacity + ")");

            ShowSeatsReservationAvailability(SelectedSeatCounter);

            // Price: output
            SetPrice(@Model.Price * Passengers);
        } // </SetPassengers>

        // Watch if reserve seats checkbox is checked, and if so, 
        // show seats reservation panel and add the additional price. 
        function WatchReserveSeatsCheckbox() {
            let ReserveSeatsCheckbox = $('#reserveSeatsCheckbox')
            let PriceContainer = $('#price');
            let SeatsReservationPanel = $('.seats-reservation');

            ReserveSeatsCheckbox.on('click', function() { 
                let Price = parseInt(PriceContainer.text().replace("$", ""));

                if (ReserveSeatsCheckbox.is(':checked')) {
                    SeatsReservationPanel.fadeIn(330);
                    PriceContainer.text("$" + (Price + 5));
                } else {
                    SeatsReservationPanel.fadeOut(330);
                    PriceContainer.text("$" + (Price - 5));
                }
            }); // </ReserveSeatsCheckbox>
        } // </WatchReserveSeatsCheckbox>

        // The `SelectedSeatsArray` needs to be converted to string 
        // in order to be send into the back-end 
        function UpdateSeatsReceived(SelectedSeatsArray) {
            let SelectedSeatString = "";

            // convert to string
            SelectedSeatsArray.forEach(function (seat) {
                SelectedSeatString += seat + ",";
            });

            // remove the last comma 
            SelectedSeatString = SelectedSeatString.substring(0, SelectedSeatString.lastIndexOf(","));

            $("#seatsReceived").val(SelectedSeatString);
        } // </UpdateSeatsReceived>

        // Reserve Seats based on passengers number 
        function ReserveSeats() {
            let Seat = $('.train__seat');

            // A string of selected seats divided by comma Ex. "3,4,5,".
            let SelectedSeat = "";

            // Default number of passengers.
            let PassengersNumber = 1;

            Seat.on('click', function() {
                let ClickedSeat = $(this);
                let ClickedSeatNumber = parseInt(ClickedSeat.text());

                // if seat is already selected
                if (ClickedSeat.hasClass("train__seat--selected")) {
                    
                    // remove the selected seat number from the `SelectedSeatsArray`
                    SelectedSeatsArray.splice(SelectedSeatsArray.indexOf(ClickedSeatNumber), 1);

                    SelectedSeatCounter--;

                    ClickedSeat.removeClass("train__seat--selected");
                    
                    SetPrice(GetCurrentPrice() - 5);
                } else {
                    // Check passengers number after each click.
                    PassengersNumber = PassengersNumberInput.val();

                    // Make sure that the number of reserved seats does not
                    // exceeds the number of passengers booked.  
                    if (PassengersNumber > SelectedSeatCounter) {
                        SelectedSeatCounter++;

                        SeatNumber = parseInt(ClickedSeat.text());

                        // add the seat number into the `SelectedSeatsArray`
                        SelectedSeatsArray.push(SeatNumber); 

                        // making sure no duplicates
                        SelectedSeatsArray = Array.from(new Set(SelectedSeatsArray));

                        ClickedSeat.addClass("train__seat--selected");
                        
                        UpdateSeatsReceived(SelectedSeatsArray);

                        SetPrice(GetCurrentPrice() + 5);
                    }
                }

                ShowSeatsReservationAvailability(SelectedSeatsArray.length);
            }); // </Seat>
        } // </ReserveSeats>

        function ShowSeatsReservationAvailability(ReservedSeats) {
            $(".seatsAvailable").text(ReservedSeats + "/" + PassengersNumberInput.val());
        }

        function GetCurrentPrice() {
            return parseInt($('#price').text().replace('$', ''));
        }

        function SetPrice(price) {
            $('#price').text("$" + price);
        }

        // INITIAL POINT
        (function () {
            let Capacity = $('#capacity').text().replace('(', '').replace(')', '');

            PassengersControllers(Capacity);
            WatchReserveSeatsCheckbox();

            ReserveSeats();  
        })();
    </script>
}

<div class="row mb-4">
    <div class="col-md-7">

        <!-- Booking section starts here -->
        <div class="card">
            <div class="card-body">

                <!-- <Booking details> -->
                <h3>
                    <strong>@Model.Departure - @Model.Destination</strong>
                    <span class="badge badge-success" id="price">$@Model.Price</span>
                </h3>
                <p>@Model.DepartureTime - @Model.ArrivalTime</p>
                <p class="mb-0"><i class="fas fa-train"></i> @Model.Train.Name</p>
                <!-- </Booking details> -->
                
                <!-- <Booking form> -->
                <form asp-action="BookJourney" asp-controller="Bookings">

                    <!-- <Booking form: Passengers> -->
                    <div class="passengers">
                        <div for="Passengers" class="passengers__title">
                            <i class="fas fa-users"></i> How many passengers?
                        </div>

                        <div class="passengers__control">
                            <div class="passengers__number--minus"><span class="minus">-</span></div>
                            <div class="passengers__number">1</div>
                            <div class="passengers__number--plus"><span class="plus">+</span></div>
                        </div>

                        <div class="passengers__max">
                            <small id="capacity">(@RemainingCapacity)</small>
                        </div>
                    </div>
                     <!-- </Booking form: Passengers> -->

                    @if (@Model.AllowSeatReservation) {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="reserveSeatsCheckbox">
                        <label class="form-check-label" for="reserveSeatsCheckbox">
                            Do you want to reserve seats? <br>
                            <small>Extra <strong>5$</strong> will be charged per seat.</small>
                        </label>
                    </div>
                    }

                    <hr>

                    <input type="number" name="Passengers" class="passengers__number--input" min="1" max="@PassengersInputMaximum" value="1" hidden />
                    <input type="hidden" name="JourneyID" value="@Model.JourneyID" />
                    <input type="hidden" name="UserID" value="@userManager.GetUserId(User)" />
                    <input type="hidden" name="SeatsReceived" value="0" id="seatsReceived" />

                    <input type="submit" value="Pay" class="btn btn-sm btn-dark" disabled="@SubmittionNotAllowed">

                    <a class="btn btn-sm btn-light ml-2" href="/home">Travel</a> 
                </form>
                <!-- </Booking form> -->

            </div> <!-- </card-body> -->
        </div> <!-- </card> -->

        <br><br>

        <!-- Payment section starts here -->
        <div class="card">
            <div class="card-body">
                    
                <div class="bg-white rounded-lg">
                    <!-- Credit card form tabs -->
                    <ul role="tablist" class="nav bg-light nav-pills rounded-pill nav-fill mb-3">
                        <li class="nav-item">
                            <a data-toggle="pill" href="#nav-tab-card" class="nav-link active rounded-pill">
                                <i class="fa fa-credit-card"></i> Credit Card
                            </a>
                        </li>
                        <li class="nav-item">
                            <a data-toggle="pill" href="#nav-tab-paypal" class="nav-link rounded-pill">
                                <i class="fa fa-paypal"></i> Paypal
                            </a>
                        </li>
                        <li class="nav-item">
                            <a data-toggle="pill" href="#nav-tab-bank" class="nav-link rounded-pill">
                                <i class="fa fa-university"></i> Bank Transfer
                            </a>
                        </li>
                    </ul>
                    <!-- End -->

                    <!-- Credit card form content -->
                    <div class="tab-content">

                        <!-- credit card info-->
                        <div id="nav-tab-card" class="tab-pane fade show active">
                            <form role="form">
                                <div class="form-group">
                                    <label for="username">Full name (on the card)</label>
                                    <input type="text" name="username" placeholder="Jason Doe" required class="form-control">
                                </div>
                                <div class="form-group">
                                    <label for="cardNumber">Card number</label>
                                    <div class="input-group">
                                        <input type="text" name="cardNumber" placeholder="Your card number" class="form-control" required>
                                        <div class="input-group-append">
                                            <span class="input-group-text text-muted">
                                                    <i class="fa fa-cc-visa mx-1"></i>
                                                    <i class="fa fa-cc-amex mx-1"></i>
                                                    <i class="fa fa-cc-mastercard mx-1"></i>
                                                </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm-8">
                                        <div class="form-group">
                                            <label><span class="hidden-xs">Expiration</span></label>
                                            <div class="input-group">
                                                <input type="number" placeholder="MM" name="" class="form-control" required>
                                                <input type="number" placeholder="YY" name="" class="form-control" required>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-sm-4">
                                        <div class="form-group mb-4">
                                            <label data-toggle="tooltip" title="Three-digits code on the back of your card">CVV
                                                <i class="fa fa-question-circle"></i>
                                            </label>
                                            <input type="text" required class="form-control">
                                        </div>
                                    </div>

                                </div>
                                <button type="button" class="subscribe btn btn-primary btn-block rounded-pill shadow-sm"> Confirm </button>
                            </form>
                        </div>
                        <!-- End -->

                        <!-- Paypal info -->
                        <div id="nav-tab-paypal" class="tab-pane fade">
                            <p>Paypal is easiest way to pay online</p>
                            <p>
                                <button type="button" class="btn btn-primary rounded-pill"><i class="fa fa-paypal mr-2"></i> Log into my Paypal</button>
                            </p>
                            <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                            </p>
                        </div>
                        <!-- End -->

                        <!-- bank transfer info -->
                        <div id="nav-tab-bank" class="tab-pane fade">
                            <h6>Bank account details</h6>
                            <dl>
                                <dt>Bank</dt>
                                <dd> THE WORLD BANK</dd>
                            </dl>
                            <dl>
                                <dt>Account number</dt>
                                <dd>7775877975</dd>
                            </dl>
                            <dl>
                                <dt>IBAN</dt>
                                <dd>CZ7775877975656</dd>
                            </dl>
                            <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                            </p>
                        </div>
                        <!-- End -->
                    </div>
                    <!-- End -->

                </div>
            
            </div>
        </div>
        <!-- Payment section ends here -->

    </div> <!-- </col> -->
    <!-- Booking section ends here -->

    <!-- Seat(s) reservation section starts here -->
    @if (@Model.AllowSeatReservation) {
    <div class="col-md-5">
        <div class="seats-reservation card">
            <div class="card-body">
                <h4>Select your seat(s) <small class="seatsAvailable badge">0/1</small></h4>
                <p>If you do not select any seat the system will automatically select for you.</p>

                <div class="train">
                    
                    @for (int i = 1; i <= Model.Train.Capacity; i++) {
                        
                        var SeatIsTaken = false; 

                        // Get the list of seats taken in this journey.
                        @foreach(var seat in Model.Seats) {

                            // If the current seat in the loop is not taken just
                            // continue to the next one.
                            @if (seat.Number != i) {continue;}

                            // If the seat is taken add it in the UI with `train__seat--taken`
                            // class assigned which  will change the appearance of the seat.
                            <div class="train__seat train__seat--taken">@i</div> 
                            SeatIsTaken = true; 
                        }

                        
                        @if (!SeatIsTaken) {
                            // If the seat is not taken add it as a normal seat which can be
                            // taken by users who want to reserve 
                            <div class="train__seat">@i</div> 
                        }

                        // Empty colomn betwen seats
                        @if (i % 2 == 0 && i % 4 != 0) {
                            <div></div>
                        }

                        // Empty row
                        @if (i % 16 == 0) {
                            <div></div><div></div><div></div><div></div><div></div>
                        }
                    }
                </div>
                
            </div>
        </div> 
    </div>
    }
    <!-- Seat(s) reservation section ends here -->


</div> <!-- </row> -->